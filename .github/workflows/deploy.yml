name: deploy

on:
  push:
    branches:
      - main
    tags:
      - v*
  workflow_dispatch:

env:
  IMAGE_NAME: pranavb6/pranav-search
  VULTR_HOSTNAME: ${{ secrets.GAIA_HOSTNAME }}
  VULTR_USER: root
  VULTR_PORT: 22
  VULTR_SSH_KEY: ${{ secrets.GAIA_SSH_KEY }}
  SECRET_MESSAGE: ${{ secrets.SECRET_MESSAGE }}
  BANNER_NAME: Pranav

permissions:
  contents: read
  id-token: write
  security-events: write

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      # CodeQL tools for security scanning
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  build-and-test-npm-project:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 16

      # install dependencies
      - name: Install npm dependencies
        run: npm install

      # run the tests
      - name: Test
        run: npm test

      # build the project
      - name: Build
        run: npm run build

      # upload the build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

  build-and-push-docker-image:
    runs-on: ubuntu-latest
    needs: build-and-test-npm-project
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          flavor: |
            latest=true

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            "SECRET_MESSAGE_ARG=${{ env.SECRET_MESSAGE }}"
            "BANNER_NAME_ARG=${{ env.BANNER_NAME }}"
  deploy-image-to-vultr:
    runs-on: ubuntu-latest
    needs: build-and-push-docker-image
    steps:
      - name: Deploy to Vultr
        uses: appleboy/ssh-action@v0.1.7
        env:
          CONTAINER_NAME: pranav-search
        with:
          host: ${{ env.VULTR_HOSTNAME }}
          username: ${{ env.VULTR_USER }}
          port: ${{ env.VULTR_PORT }}
          key: ${{ env.VULTR_SSH_KEY }}
          script_stop: true # stop script if any command fails
          script: |
            echo Hello from $HOSTNAME

            echo Pulling image ${{ env.IMAGE_NAME }}
            docker pull ${{ env.IMAGE_NAME }}

            echo Stopping and removing container ${{ env.CONTAINER_NAME }}
            docker stop ${{ env.CONTAINER_NAME }}
            docker rm ${{ env.CONTAINER_NAME }}

            echo Starting container ${{ env.CONTAINER_NAME }}
            docker run -d --name ${{ env.CONTAINER_NAME }} -p 80:80 ${{ env.IMAGE_NAME }}

  deploy-image-to-gcp:
    runs-on: ubuntu-latest
    needs: build-and-push-docker-image
    steps:
      # actions/checkout MUST come before auth
      - uses: "actions/checkout@v3"
      - id: "auth"
        name: "Authenticate to GCP"
        uses: "google-github-actions/auth@v0.3.1"
        with:
          create_credentials_file: "true"
          workload_identity_provider: "projects/338470562339/locations/global/workloadIdentityPools/wave-pool/providers/github-actions"
          service_account: "bobbie@pranav-search.iam.gserviceaccount.com"
      # Now you can run gcloud commands authenticated as the impersonated service account.
      - name: "use gcloud cli"
        run: |
          # pull the image and run it in google cloud 
          echo Credentials File Path: ${{ steps.auth.outputs.credentials_file_path }}
          cat ${{ steps.auth.outputs.credentials_file_path }}
          gcloud auth login --brief --cred-file="${{ steps.auth.outputs.credentials_file_path }}"
          gcloud config set project pranav-search
          gcloud compute ssh kause --zone=us-central1-c --command="echo 'hello world'"
